import axios, { AxiosInstance, AxiosRequestConfig, AxiosError, Method } from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';

// Define the response type
interface ApiResponse<T> {
  data: T;
}

// Create Axios instance with base configuration
const axiosInstance: AxiosInstance = axios.create({
  baseURL: 'https://your-api-url.com', // Replace with your API base URL
  timeout: 10000,
});

// Request Interceptor
axiosInstance.interceptors.request.use(
  async (config: AxiosRequestConfig) => {
    const token = await AsyncStorage.getItem('accessToken');
    if (token) {
      config.headers = {
        ...config.headers,
        Authorization: `Bearer ${token}`,
      };
    }
    return config;
  },
  (error: AxiosError) => Promise.reject(error)
);

// Response Interceptor for token refresh
axiosInstance.interceptors.response.use(
  (response) => response,
  async (error: AxiosError) => {
    const originalRequest = error.config;

    if (error.response?.status === 401 && !originalRequest?._retry) {
      originalRequest._retry = true;

      try {
        const refreshToken = await AsyncStorage.getItem('refreshToken');
        const response = await axios.post('https://your-api-url.com/auth/refresh', {
          refreshToken,
        });

        const { accessToken, refreshToken: newRefreshToken } = response.data;
        await AsyncStorage.setItem('accessToken', accessToken);
        await AsyncStorage.setItem('refreshToken', newRefreshToken);

        originalRequest.headers = {
          ...originalRequest.headers,
          Authorization: `Bearer ${accessToken}`,
        };
        return axiosInstance(originalRequest);
      } catch (refreshError) {
        console.error('Token refresh failed:', refreshError);
        return Promise.reject(refreshError);
      }
    }

    return Promise.reject(error);
  }
);

// Centralized Error Handler
const handleApiError = (error: AxiosError): string => {
  if (error.response) {
    console.error('API Error Response:', error.response.data);
    return (error.response.data as { message?: string })?.message || 'API Error Occurred.';
  } else if (error.request) {
    console.error('API No Response Error:', error.request);
    return 'No response from the server.';
  } else {
    console.error('API Request Setup Error:', error.message);
    return error.message || 'Unknown error occurred.';
  }
};

// Reusable API Function with support for multipart/form-data
export const apiRequest = async <T>(
  method: Method,
  endpoint: string,
  data: any = null,
  isFile: boolean = false
): Promise<ApiResponse<T>> => {
  try {
    const config: AxiosRequestConfig = {
      method,
      url: endpoint,
      headers: isFile
        ? { 'Content-Type': 'multipart/form-data' }
        : { 'Content-Type': 'application/json' },
      ...(data && { data: isFile ? data : JSON.stringify(data) }),
    };

    const response = await axiosInstance(config);
    return response.data;
  } catch (error) {
    throw new Error(handleApiError(error as AxiosError));
  }
};

export default axiosInstance;

==================================================================


import React, { useState } from 'react';
import {
  View,
  Text,
  Button,
  StyleSheet,
  Image,
  Alert,
  ActivityIndicator,
} from 'react-native';
import { launchImageLibrary, Asset } from 'react-native-image-picker';
import { apiRequest } from './apiService';

// Define the upload response type
interface UploadResponse {
  message: string;
  file: {
    path: string;
    size: number;
    type: string;
    filename: string;
  };
}

const App: React.FC = () => {
  const [imageUri, setImageUri] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(false);

  // Handle image selection
  const handleSelectImage = () => {
    launchImageLibrary(
      {
        mediaType: 'photo',
        includeBase64: false,
      },
      (response) => {
        if (response.didCancel) {
          console.log('User cancelled image picker');
        } else if (response.errorMessage) {
          console.log('ImagePicker Error:', response.errorMessage);
        } else if (response.assets) {
          const selectedAsset: Asset = response.assets[0];
          setImageUri(selectedAsset.uri || null);
        }
      }
    );
  };

  // Handle image upload
  const handleUploadImage = async () => {
    if (!imageUri) {
      Alert.alert('Error', 'Please select an image to upload.');
      return;
    }

    setLoading(true);

    // Prepare FormData for image upload
    const formData = new FormData();
    formData.append('file', {
      uri: imageUri,
      name: 'upload.jpg',
      type: 'image/jpeg',
    } as unknown as Blob);

    try {
      const response = await apiRequest<UploadResponse>('POST', '/upload', formData, true);
      Alert.alert('Success', response.message);
      console.log('Upload Response:', response);
    } catch (error) {
      console.error('Upload Error:', error.message);
      Alert.alert('Error', error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.header}>Image Upload Example</Text>

      {imageUri && (
        <Image source={{ uri: imageUri }} style={styles.imagePreview} />
      )}

      <Button title="Select Image" onPress={handleSelectImage} />

      {loading ? (
        <ActivityIndicator size="large" color="#0000ff" />
      ) : (
        <Button title="Upload Image" onPress={handleUploadImage} />
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    justifyContent: 'center',
    alignItems: 'center',
  },
  header: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 16,
  },
  imagePreview: {
    width: 200,
    height: 200,
    marginVertical: 16,
    borderRadius: 8,
  },
});

export default App;

